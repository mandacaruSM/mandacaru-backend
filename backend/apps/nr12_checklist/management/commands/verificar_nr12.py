# backend/apps/nr12_checklist/management/commands/verificar_nr12.py

from django.core.management.base import BaseCommand
from django.conf import settings
from backend.apps.equipamentos.models import Equipamento
from backend.apps.nr12_checklist.models import ChecklistNR12, ItemChecklistPadrao, TipoEquipamentoNR12
from datetime import date, timedelta
import json

class Command(BaseCommand):
    help = 'Verifica configura√ß√£o completa do sistema NR12'

    def add_arguments(self, parser):
        parser.add_argument(
            '--corrigir',
            action='store_true',
            help='Corrige problemas encontrados automaticamente'
        )
        parser.add_argument(
            '--relatorio',
            action='store_true',
            help='Gera relat√≥rio detalhado'
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üîç VERIFICA√á√ÉO COMPLETA DO SISTEMA NR12'))
        self.stdout.write('=' * 60)
        
        problemas = []
        
        # 1. Verificar Celery
        problemas.extend(self.verificar_celery())
        
        # 2. Verificar Modelos
        problemas.extend(self.verificar_modelos())
        
        # 3. Verificar Equipamentos
        problemas.extend(self.verificar_equipamentos())
        
        # 4. Verificar Schedules
        problemas.extend(self.verificar_schedules())
        
        # 5. Verificar Checklists Recentes
        problemas.extend(self.verificar_checklists_recentes())
        
        # Resumo de problemas
        self.exibir_resumo(problemas)
        
        # Corrigir problemas se solicitado
        if options['corrigir']:
            self.corrigir_problemas(problemas)
        
        # Gerar relat√≥rio se solicitado
        if options['relatorio']:
            self.gerar_relatorio()

    def verificar_celery(self):
        """Verifica configura√ß√£o do Celery"""
        self.stdout.write('\nüîß VERIFICANDO CELERY:')
        self.stdout.write('-' * 30)
        
        problemas = []
        
        # Verificar se CELERY_BEAT_SCHEDULE est√° configurado
        if hasattr(settings, 'CELERY_BEAT_SCHEDULE'):
            schedule = settings.CELERY_BEAT_SCHEDULE
            
            # Verificar tasks NR12
            tasks_nr12 = [
                'checklists_diarios_6h',
                'checklists_semanais_segunda_6h', 
                'checklists_mensais_1_6h'
            ]
            
            for task_name in tasks_nr12:
                if task_name in schedule:
                    self.stdout.write(f'   ‚úÖ {task_name}: Configurado')
                else:
                    self.stdout.write(f'   ‚ùå {task_name}: N√ÉO configurado')
                    problemas.append(f'Task {task_name} n√£o est√° no CELERY_BEAT_SCHEDULE')
        else:
            self.stdout.write('   ‚ùå CELERY_BEAT_SCHEDULE n√£o configurado')
            problemas.append('CELERY_BEAT_SCHEDULE n√£o existe no settings.py')
        
        # Verificar broker
        if hasattr(settings, 'CELERY_BROKER_URL'):
            self.stdout.write(f'   ‚úÖ Broker: {settings.CELERY_BROKER_URL}')
        else:
            self.stdout.write('   ‚ùå CELERY_BROKER_URL n√£o configurado')
            problemas.append('CELERY_BROKER_URL n√£o configurado')
        
        return problemas

    def verificar_modelos(self):
        """Verifica integridade dos modelos"""
        self.stdout.write('\nüìä VERIFICANDO MODELOS:')
        self.stdout.write('-' * 30)
        
        problemas = []
        
        # Tipos NR12
        tipos_count = TipoEquipamentoNR12.objects.count()
        self.stdout.write(f'   Tipos de Equipamento NR12: {tipos_count}')
        if tipos_count == 0:
            problemas.append('Nenhum tipo de equipamento NR12 cadastrado')
        
        # Itens padr√£o por tipo
        for tipo in TipoEquipamentoNR12.objects.all():
            itens_count = ItemChecklistPadrao.objects.filter(
                tipo_equipamento=tipo,
                ativo=True
            ).count()
            self.stdout.write(f'   Itens padr√£o ({tipo.nome}): {itens_count}')
            if itens_count == 0:
                problemas.append(f'Tipo {tipo.nome} n√£o tem itens de checklist padr√£o')
        
        # Equipamentos configurados
        equipamentos_nr12 = Equipamento.objects.filter(ativo_nr12=True)
        self.stdout.write(f'   Equipamentos ativos NR12: {equipamentos_nr12.count()}')
        
        # Equipamentos sem tipo NR12
        sem_tipo = equipamentos_nr12.filter(tipo_nr12__isnull=True).count()
        if sem_tipo > 0:
            self.stdout.write(f'   ‚ö†Ô∏è Equipamentos sem tipo NR12: {sem_tipo}')
            problemas.append(f'{sem_tipo} equipamentos NR12 sem tipo configurado')
        
        # Equipamentos sem frequ√™ncia
        sem_freq = equipamentos_nr12.filter(
            frequencias_checklist__isnull=True
        ).count() + equipamentos_nr12.filter(
            frequencias_checklist=[]
        ).count()
        
        if sem_freq > 0:
            self.stdout.write(f'   ‚ö†Ô∏è Equipamentos sem frequ√™ncia: {sem_freq}')
            problemas.append(f'{sem_freq} equipamentos NR12 sem frequ√™ncia configurada')
        
        return problemas

    def verificar_equipamentos(self):
        """Verifica configura√ß√£o detalhada dos equipamentos"""
        self.stdout.write('\nüîß VERIFICANDO EQUIPAMENTOS:')
        self.stdout.write('-' * 30)
        
        problemas = []
        
        equipamentos = Equipamento.objects.filter(ativo_nr12=True)
        
        for freq in ['DIARIA', 'SEMANAL', 'MENSAL']:
            count = equipamentos.filter(
                frequencias_checklist__contains=[freq],
                tipo_nr12__isnull=False
            ).count()
            self.stdout.write(f'   Equipamentos {freq}: {count}')
            
            if count == 0:
                problemas.append(f'Nenhum equipamento configurado para frequ√™ncia {freq}')
        
        # Verificar equipamentos problem√°ticos
        equipamentos_problemas = equipamentos.filter(
            tipo_nr12__isnull=True
        ) | equipamentos.filter(
            frequencias_checklist__isnull=True
        ) | equipamentos.filter(
            frequencias_checklist=[]
        )
        
        if equipamentos_problemas.exists():
            self.stdout.write('\n   üö® EQUIPAMENTOS COM PROBLEMAS:')
            for eq in equipamentos_problemas[:5]:  # Mostrar apenas 5
                issues = []
                if not eq.tipo_nr12:
                    issues.append('sem tipo NR12')
                if not eq.frequencias_checklist:
                    issues.append('sem frequ√™ncia')
                
                # ‚úÖ CORRIGIDO: usar razao_social
                cliente_nome = "N/A"
                if eq.cliente:
                    cliente_nome = eq.cliente.razao_social or eq.cliente.nome_fantasia or "N/A"
                
                self.stdout.write(f'      üìå {eq.nome} ({cliente_nome}): {", ".join(issues)}')
        
        return problemas

    def verificar_schedules(self):
        """Verifica agendamentos do Celery"""
        self.stdout.write('\n‚è∞ VERIFICANDO SCHEDULES:')
        self.stdout.write('-' * 30)
        
        problemas = []
        
        if hasattr(settings, 'CELERY_BEAT_SCHEDULE'):
            schedule = settings.CELERY_BEAT_SCHEDULE
            
            # Verificar hor√°rios configurados
            schedules_esperados = {
                'checklists_diarios_6h': 'Todo dia √†s 6:00',
                'checklists_semanais_segunda_6h': 'Segunda-feira √†s 6:00',
                'checklists_mensais_1_6h': 'Dia 1 √†s 6:00'
            }
            
            for task_name, descricao in schedules_esperados.items():
                if task_name in schedule:
                    task_config = schedule[task_name]
                    self.stdout.write(f'   ‚úÖ {descricao}: Configurado')
                    
                    # Verificar se a task existe
                    task_path = task_config.get('task', '')
                    if 'nr12_checklist.tasks' in task_path:
                        self.stdout.write(f'      Task: {task_path}')
                    else:
                        problemas.append(f'Task {task_name} aponta para path incorreto: {task_path}')
                else:
                    self.stdout.write(f'   ‚ùå {descricao}: N√ÉO configurado')
                    problemas.append(f'Schedule {task_name} n√£o configurado')
        
        return problemas

    def verificar_checklists_recentes(self):
        """Verifica checklists criados recentemente"""
        self.stdout.write('\nüìã VERIFICANDO CHECKLISTS RECENTES:')
        self.stdout.write('-' * 30)
        
        problemas = []
        hoje = date.today()
        
        # √öltimos 7 dias
        for i in range(7):
            data = hoje - timedelta(days=i)
            count = ChecklistNR12.objects.filter(data_checklist=data).count()
            
            if i == 0:
                self.stdout.write(f'   Hoje ({data}): {count} checklists')
                if count == 0:
                    problemas.append('Nenhum checklist criado hoje')
            elif i <= 3:
                self.stdout.write(f'   {data}: {count} checklists')
        
        # Checklists por status hoje
        for status_code, status_name in ChecklistNR12.STATUS_CHOICES:
            count = ChecklistNR12.objects.filter(
                data_checklist=hoje,
                status=status_code
            ).count()
            if count > 0:
                self.stdout.write(f'   Status {status_name}: {count}')
        
        # Checklists atrasados
        atrasados = ChecklistNR12.objects.filter(
            status='PENDENTE',
            data_checklist__lt=hoje
        ).count()
        
        if atrasados > 0:
            self.stdout.write(f'   ‚ö†Ô∏è Checklists atrasados: {atrasados}')
            problemas.append(f'{atrasados} checklists est√£o atrasados')
        
        return problemas

    def exibir_resumo(self, problemas):
        """Exibe resumo dos problemas encontrados"""
        self.stdout.write('\nüìä RESUMO DA VERIFICA√á√ÉO:')
        self.stdout.write('=' * 50)
        
        if not problemas:
            self.stdout.write(self.style.SUCCESS('‚úÖ SISTEMA NR12 FUNCIONANDO PERFEITAMENTE!'))
            return
        
        self.stdout.write(self.style.WARNING(f'‚ö†Ô∏è {len(problemas)} PROBLEMAS ENCONTRADOS:'))
        self.stdout.write('')
        
        for i, problema in enumerate(problemas, 1):
            self.stdout.write(f'   {i}. {problema}')
        
        self.stdout.write('')
        self.stdout.write('üí° Use --corrigir para tentar corrigir automaticamente')

    def corrigir_problemas(self, problemas):
        """Tenta corrigir problemas automaticamente"""
        self.stdout.write('\nüîß CORRIGINDO PROBLEMAS:')
        self.stdout.write('-' * 30)
        
        corrigidos = 0
        
        # Criar tipos NR12 b√°sicos se n√£o existirem
        if TipoEquipamentoNR12.objects.count() == 0:
            tipos_basicos = [
                {'nome': 'Escavadeira', 'descricao': 'Escavadeiras hidr√°ulicas'},
                {'nome': 'Retroescavadeira', 'descricao': 'Retroescavadeiras'},
                {'nome': 'Trator', 'descricao': 'Tratores agr√≠colas e industriais'},
                {'nome': 'Caminh√£o', 'descricao': 'Caminh√µes e ve√≠culos pesados'},
            ]
            
            for tipo_data in tipos_basicos:
                TipoEquipamentoNR12.objects.create(**tipo_data)
                self.stdout.write(f'   ‚úÖ Criado tipo: {tipo_data["nome"]}')
                corrigidos += 1
        
        # Criar itens padr√£o b√°sicos para tipos sem itens
        for tipo in TipoEquipamentoNR12.objects.all():
            if not ItemChecklistPadrao.objects.filter(tipo_equipamento=tipo).exists():
                itens_basicos = [
                    'Verificar n√≠veis de √≥leo e fluidos',
                    'Testar funcionamento dos freios',
                    'Verificar estado dos pneus/esteiras',
                    'Testar luzes e sinaliza√ß√£o',
                    'Verificar dispositivos de seguran√ßa',
                    'Limpar filtros de ar',
                    'Verificar vazamentos',
                    'Testar sistema hidr√°ulico',
                ]
                
                for i, item in enumerate(itens_basicos, 1):
                    ItemChecklistPadrao.objects.create(
                        tipo_equipamento=tipo,
                        item=item,
                        descricao=f'Verifica√ß√£o padr√£o: {item}',
                        criticidade='MEDIA',
                        ordem=i
                    )
                
                self.stdout.write(f'   ‚úÖ Criados {len(itens_basicos)} itens para {tipo.nome}')
                corrigidos += 1
        
        self.stdout.write(f'\n‚úÖ {corrigidos} problemas corrigidos automaticamente')

    def gerar_relatorio(self):
        """Gera relat√≥rio detalhado do sistema"""
        self.stdout.write('\nüìÑ RELAT√ìRIO DETALHADO:')
        self.stdout.write('=' * 50)
        
        hoje = date.today()
        
        # Estat√≠sticas gerais
        stats = {
            'tipos_nr12': TipoEquipamentoNR12.objects.count(),
            'itens_padrao': ItemChecklistPadrao.objects.count(),
            'equipamentos_nr12': Equipamento.objects.filter(ativo_nr12=True).count(),
            'checklists_hoje': ChecklistNR12.objects.filter(data_checklist=hoje).count(),
            'checklists_total': ChecklistNR12.objects.count(),
        }
        
        self.stdout.write('üìä ESTAT√çSTICAS GERAIS:')
        for key, value in stats.items():
            self.stdout.write(f'   {key.replace("_", " ").title()}: {value}')
        
        # Equipamentos por frequ√™ncia
        self.stdout.write('\nüîß EQUIPAMENTOS POR FREQU√äNCIA:')
        for freq in ['DIARIA', 'SEMANAL', 'MENSAL']:
            count = Equipamento.objects.filter(
                ativo_nr12=True,
                frequencias_checklist__contains=[freq]
            ).count()
            self.stdout.write(f'   {freq}: {count} equipamentos')
        
        # Checklists por status (√∫ltimos 7 dias)
        self.stdout.write('\nüìã CHECKLISTS POR STATUS (√∫ltimos 7 dias):')
        data_inicio = hoje - timedelta(days=7)
        
        for status_code, status_name in ChecklistNR12.STATUS_CHOICES:
            count = ChecklistNR12.objects.filter(
                data_checklist__gte=data_inicio,
                status=status_code
            ).count()
            self.stdout.write(f'   {status_name}: {count}')
        
        self.stdout.write(self.style.SUCCESS('\n‚úÖ Relat√≥rio conclu√≠do!'))