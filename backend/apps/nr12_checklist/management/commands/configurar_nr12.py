# ================================================================
# ARQUIVO: backend/apps/nr12_checklist/management/commands/configurar_nr12.py
# ================================================================

from django.core.management.base import BaseCommand
from django.utils import timezone
from backend.apps.nr12_checklist.models import TipoEquipamentoNR12, ItemChecklistPadrao
from datetime import date

class Command(BaseCommand):
    help = 'Configura dados iniciais para o sistema NR12'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--reset',
            action='store_true',
            help='Remove todos os dados existentes antes de criar novos',
        )
        parser.add_argument(
            '--demo',
            action='store_true',
            help='Cria dados de demonstra√ß√£o',
        )
    
    def handle(self, *args, **options):
        self.stdout.write("üîß Configurando sistema NR12...")
        
        if options['reset']:
            self.stdout.write("üóëÔ∏è Removendo dados existentes...")
            ItemChecklistPadrao.objects.all().delete()
            TipoEquipamentoNR12.objects.all().delete()
            self.stdout.write("‚úÖ Dados removidos!")
        
        # Criar tipos b√°sicos se n√£o existirem
        self._criar_tipos_basicos()
        
        if options['demo']:
            self._criar_dados_demo()
        
        self._exibir_estatisticas()
        
        self.stdout.write(self.style.SUCCESS("\nüéâ Sistema NR12 configurado com sucesso!"))
    
    def _criar_tipos_basicos(self):
        """Cria tipos b√°sicos de equipamentos NR12"""
        self.stdout.write("\nüìã Criando tipos b√°sicos de equipamentos...")
        
        tipos_basicos = [
            {
                'nome': 'Escavadeira Hidr√°ulica',
                'descricao': 'Escavadeiras hidr√°ulicas sobre esteiras ou pneus para movimenta√ß√£o de terra',
                'itens': [
                    ('Verificar funcionamento dos controles de comando', 'Testar todos os joysticks e comandos hidr√°ulicos', 'CRITICA', 1),
                    ('Inspe√ß√£o visual dos cilindros hidr√°ulicos', 'Verificar vazamentos, danos e veda√ß√µes dos cilindros', 'ALTA', 2),
                    ('Verificar n√≠vel e condi√ß√£o do √≥leo hidr√°ulico', 'Conferir n√≠vel, cor e contamina√ß√£o do √≥leo', 'ALTA', 3),
                    ('Testar freio de estacionamento e bloqueios', 'Verificar se trava corretamente todos os movimentos', 'CRITICA', 4),
                    ('Inspe√ß√£o das esteiras ou pneus', 'Verificar desgaste, danos e tensionamento', 'MEDIA', 5),
                    ('Verificar alarme de r√© e sinaliza√ß√£o', 'Testar funcionamento do alarme sonoro e visual', 'ALTA', 6),
                    ('Inspe√ß√£o da cabine e estrutura ROPS/FOPS', 'Verificar integridade da estrutura de prote√ß√£o', 'CRITICA', 7),
                    ('Verificar sistema de ilumina√ß√£o', 'Testar far√≥is, lanternas e sinalizadores', 'MEDIA', 8),
                    ('Inspe√ß√£o geral da m√°quina', 'Verificar fixa√ß√µes, soldas e componentes estruturais', 'MEDIA', 9),
                    ('Verificar sistema de arrefecimento', 'Inspecionar radiador, mangueiras e n√≠vel', 'ALTA', 10),
                ]
            },
            {
                'nome': 'Retroescavadeira',
                'descricao': 'Retroescavadeiras com carregadeira frontal para escava√ß√£o e carregamento',
                'itens': [
                    ('Verificar funcionamento dos pedais de comando', 'Testar freio, acelerador, embreagem e comandos', 'CRITICA', 1),
                    ('Inspe√ß√£o do sistema hidr√°ulico completo', 'Verificar press√£o, vazamentos e temperatura', 'ALTA', 2),
                    ('Testar comando da lan√ßa traseira', 'Verificar todos os movimentos de escava√ß√£o', 'ALTA', 3),
                    ('Verificar p√° carregadeira frontal', 'Testar levantamento, inclina√ß√£o e movimentos', 'ALTA', 4),
                    ('Inspe√ß√£o dos pneus e calibragem', 'Verificar press√£o, desgaste e danos', 'MEDIA', 5),
                    ('Verificar sistema de dire√ß√£o', 'Testar alinhamento, folgas e funcionamento', 'ALTA', 6),
                    ('Testar alarme de r√© e sinaliza√ß√£o', 'Verificar funcionamento dos dispositivos de seguran√ßa', 'ALTA', 7),
                    ('Inspe√ß√£o da cabine e cintos', 'Verificar estrutura de prote√ß√£o e cintos de seguran√ßa', 'CRITICA', 8),
                    ('Verificar estabilizadores (outriggers)', 'Testar funcionamento e veda√ß√µes', 'ALTA', 9),
                    ('Inspe√ß√£o do motor e fluidos', 'Verificar n√≠veis de √≥leo, √°gua e combust√≠vel', 'ALTA', 10),
                ]
            },
            {
                'nome': 'Carregadeira de Rodas',
                'descricao': 'Carregadeiras frontais sobre pneus para movimenta√ß√£o de materiais',
                'itens': [
                    ('Verificar sistema de frenagem completo', 'Testar freio de servi√ßo e estacionamento', 'CRITICA', 1),
                    ('Inspe√ß√£o da ca√ßamba e implementos', 'Verificar soldas, desgaste e fixa√ß√µes', 'ALTA', 2),
                    ('Testar sistema hidr√°ulico', 'Verificar press√£o, temperatura e funcionamento', 'ALTA', 3),
                    ('Verificar pneus e sistema de rodagem', 'Conferir calibragem, desgaste e alinhamento', 'MEDIA', 4),
                    ('Inspe√ß√£o do motor e sistemas auxiliares', 'Verificar n√≠veis, vazamentos e funcionamento', 'ALTA', 5),
                    ('Testar sistema de dire√ß√£o', 'Verificar folgas, alinhamento e assist√™ncia', 'ALTA', 6),
                    ('Verificar ilumina√ß√£o e sinaliza√ß√£o', 'Testar far√≥is de trabalho e sinalizadores', 'MEDIA', 7),
                    ('Inspe√ß√£o da cabine ROPS', 'Verificar estrutura de prote√ß√£o contra capotamento', 'CRITICA', 8),
                    ('Verificar sistema de transmiss√£o', 'Testar c√¢mbio, diferencial e sistemas', 'ALTA', 9),
                    ('Inspe√ß√£o de seguran√ßa geral', 'Verificar dispositivos e sistemas de prote√ß√£o', 'ALTA', 10),
                ]
            }
        ]
        
        for tipo_data in tipos_basicos:
            tipo, created = TipoEquipamentoNR12.objects.get_or_create(
                nome=tipo_data['nome'],
                defaults={'descricao': tipo_data['descricao']}
            )
            
            if created:
                self.stdout.write(f"  ‚úÖ Criado tipo: {tipo_data['nome']}")
                
                # Criar itens para este tipo
                for item, desc, crit, ordem in tipo_data['itens']:
                    ItemChecklistPadrao.objects.create(
                        tipo_equipamento=tipo,
                        item=item,
                        descricao=desc,
                        criticidade=crit,
                        ordem=ordem,
                        ativo=True
                    )
                
                self.stdout.write(f"    üìù {len(tipo_data['itens'])} itens criados")
            else:
                self.stdout.write(f"  ‚ö†Ô∏è  Tipo j√° existe: {tipo_data['nome']}")
    
    def _criar_dados_demo(self):
        """Cria dados de demonstra√ß√£o"""
        self.stdout.write("\nüéÆ Criando dados de demonstra√ß√£o...")
        
        # Aqui voc√™ pode adicionar cria√ß√£o de equipamentos de exemplo,
        # checklists de demonstra√ß√£o, etc.
        # Por enquanto, apenas uma mensagem
        self.stdout.write("  ‚ÑπÔ∏è  Dados de demo podem ser adicionados conforme necess√°rio")
    
    def _exibir_estatisticas(self):
        """Exibe estat√≠sticas do sistema"""
        self.stdout.write("\nüìä ESTAT√çSTICAS DO SISTEMA:")
        self.stdout.write("-" * 50)
        
        total_tipos = TipoEquipamentoNR12.objects.count()
        total_itens = ItemChecklistPadrao.objects.count()
        
        self.stdout.write(f"üîß Tipos de equipamento NR12: {total_tipos}")
        self.stdout.write(f"üìã Itens de checklist padr√£o: {total_itens}")
        
        # Estat√≠sticas por criticidade
        criticas = ItemChecklistPadrao.objects.filter(criticidade='CRITICA').count()
        altas = ItemChecklistPadrao.objects.filter(criticidade='ALTA').count()
        medias = ItemChecklistPadrao.objects.filter(criticidade='MEDIA').count()
        baixas = ItemChecklistPadrao.objects.filter(criticidade='BAIXA').count()
        
        self.stdout.write(f"\nüìà ITENS POR CRITICIDADE:")
        self.stdout.write(f"  üî¥ Cr√≠ticos: {criticas}")
        self.stdout.write(f"  üü† Altos: {altas}")
        self.stdout.write(f"  üü° M√©dios: {medias}")
        self.stdout.write(f"  üü¢ Baixos: {baixas}")
        
        # Estat√≠sticas por tipo
        self.stdout.write(f"\nüìã ITENS POR TIPO:")
        for tipo in TipoEquipamentoNR12.objects.all():
            count = tipo.itens_checklist.count()
            self.stdout.write(f"  {tipo.nome}: {count} itens")


# ================================================================
# ARQUIVO: backend/apps/nr12_checklist/management/