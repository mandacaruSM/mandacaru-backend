# backend/apps/shared/management/commands/verificar_campos.py

from django.core.management.base import BaseCommand
from backend.apps.operadores.models import Operador

class Command(BaseCommand):
    help = 'Verifica campos do modelo Operador'

    def handle(self, *args, **options):
        self.stdout.write('üîç VERIFICANDO CAMPOS DO MODELO OPERADOR\n')
        
        # Listar todos os campos
        campos = [field.name for field in Operador._meta.get_fields()]
        
        self.stdout.write('üìã Campos encontrados:')
        for campo in sorted(campos):
            self.stdout.write(f'   ‚Ä¢ {campo}')
        
        # Verificar campos espec√≠ficos
        campos_esperados = ['qr_code', 'qr_code_data', 'codigo', 'nome']
        
        self.stdout.write('\n‚úÖ Verifica√ß√£o de campos cr√≠ticos:')
        for campo in campos_esperados:
            existe = campo in campos
            status = '‚úÖ' if existe else '‚ùå'
            self.stdout.write(f'   {status} {campo}: {"Existe" if existe else "N√ÉO EXISTE"}')
        
        # Testar operador
        try:
            operador = Operador.objects.first()
            if operador:
                self.stdout.write(f'\nüë§ Teste com operador {operador.codigo}:')
                self.stdout.write(f'   ‚Ä¢ qr_code: {operador.qr_code}')
                self.stdout.write(f'   ‚Ä¢ qr_code_data: {getattr(operador, "qr_code_data", "CAMPO N√ÉO EXISTE")}')
            else:
                self.stdout.write('\n‚ö†Ô∏è  Nenhum operador encontrado no banco')
        except Exception as e:
            self.stdout.write(f'\n‚ùå Erro ao testar: {e}')