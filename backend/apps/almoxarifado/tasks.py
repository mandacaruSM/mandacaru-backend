# ----------------------------------------------------------------
# 11. TASKS CELERY PARA AUTOMA√á√ÉO
# backend/apps/almoxarifado/tasks.py
# ----------------------------------------------------------------

from celery import shared_task
from django.utils import timezone
from datetime import date, timedelta
from .models import EstoqueCombustivel
from .notifications import NotificacaoEstoque
import logging

logger = logging.getLogger(__name__)

@shared_task
def verificar_estoques_baixos():
    """Task para verificar estoques baixos e enviar alertas"""
    try:
        estoques_baixos = EstoqueCombustivel.objects.filter(
            ativo=True
        ).select_related('tipo_combustivel')
        
        alertas_enviados = 0
        
        for estoque in estoques_baixos:
            if estoque.abaixo_do_minimo:
                NotificacaoEstoque.enviar_alerta_estoque_baixo(estoque)
                alertas_enviados += 1
        
        logger.info(f"‚úÖ Verifica√ß√£o de estoque conclu√≠da: {alertas_enviados} alertas enviados")
        return f"Alertas enviados: {alertas_enviados}"
        
    except Exception as e:
        logger.error(f"‚ùå Erro na verifica√ß√£o de estoque: {e}")
        raise

@shared_task
def enviar_relatorio_consumo_diario():
    """Task para enviar relat√≥rio di√°rio de consumo"""
    try:
        NotificacaoEstoque.enviar_relatorio_consumo_diario()
        return "Relat√≥rio di√°rio enviado com sucesso"
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao enviar relat√≥rio di√°rio: {e}")
        raise

@shared_task
def consolidar_movimentacoes_diarias():
    """Task para consolidar movimenta√ß√µes di√°rias"""
    try:
        from .models import MovimentacaoEstoque, Produto
        from django.db.models import Sum
        
        ontem = date.today() - timedelta(days=1)
        
        # Atualizar estoques dos produtos baseado nas movimenta√ß√µes
        produtos_combustivel = Produto.objects.filter(
            codigo__startswith='COMB_'
        )
        
        atualizados = 0
        
        for produto in produtos_combustivel:
            # Calcular saldo das movimenta√ß√µes de ontem
            movimentacoes_ontem = MovimentacaoEstoque.objects.filter(
                produto=produto,
                data__date=ontem
            )
            
            entradas = movimentacoes_ontem.filter(tipo='ENTRADA').aggregate(
                total=Sum('quantidade')
            )['total'] or 0
            
            saidas = movimentacoes_ontem.filter(tipo='SAIDA').aggregate(
                total=Sum('quantidade')
            )['total'] or 0
            
            if entradas > 0 or saidas > 0:
                # Atualizar estoque do produto
                produto.estoque_atual = max(0, produto.estoque_atual + entradas - saidas)
                produto.save()
                atualizados += 1
                
                logger.info(
                    f"üì¶ {produto.descricao}: "
                    f"Entradas: {entradas}L, Sa√≠das: {saidas}L, "
                    f"Estoque: {produto.estoque_atual}L"
                )
        
        return f"Produtos atualizados: {atualizados}"
        
    except Exception as e:
        logger.error(f"‚ùå Erro na consolida√ß√£o: {e}")
        raise
