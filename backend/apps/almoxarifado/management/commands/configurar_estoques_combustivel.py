# ----------------------------------------------------------------
# 3. COMANDO PRINCIPAL
# backend/apps/almoxarifado/management/commands/configurar_estoques_combustivel.py
# ----------------------------------------------------------------

from django.core.management.base import BaseCommand
from backend.apps.abastecimento.models import TipoCombustivel
from backend.apps.almoxarifado.models import EstoqueCombustivel, Produto
from decimal import Decimal

class Command(BaseCommand):
    help = 'Configura estoques de combust√≠vel no almoxarifado'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--criar-tipos',
            action='store_true',
            help='Criar tipos de combust√≠vel padr√£o'
        )
        parser.add_argument(
            '--estoque-inicial',
            type=float,
            default=1000.0,
            help='Estoque inicial em litros (padr√£o: 1000L)'
        )
        parser.add_argument(
            '--estoque-minimo',
            type=float,
            default=200.0,
            help='Estoque m√≠nimo em litros (padr√£o: 200L)'
        )
    
    def handle(self, *args, **options):
        self.stdout.write("üè™ Configurando estoques de combust√≠vel...")
        
        # Criar tipos de combust√≠vel se solicitado
        if options['criar_tipos']:
            self._criar_tipos_combustivel()
        
        # Configurar estoques
        self._configurar_estoques(
            estoque_inicial=Decimal(str(options['estoque_inicial'])),
            estoque_minimo=Decimal(str(options['estoque_minimo']))
        )
        
        self.stdout.write(
            self.style.SUCCESS("‚úÖ Configura√ß√£o de estoques conclu√≠da!")
        )
    
    def _criar_tipos_combustivel(self):
        """Cria tipos de combust√≠vel padr√£o"""
        self.stdout.write("‚õΩ Criando tipos de combust√≠vel...")
        
        tipos = [
            ('Diesel S10', 'Diesel S10 para equipamentos pesados', 5.85),
            ('Diesel Comum', 'Diesel comum para equipamentos', 5.45),
            ('Gasolina Comum', 'Gasolina comum para ve√≠culos leves', 6.20),
            ('Gasolina Aditivada', 'Gasolina aditivada premium', 6.55),
            ('Arla 32', 'Solu√ß√£o de ureia para SCR', 3.15),
        ]
        
        criados = 0
        for nome, descricao, preco in tipos:
            tipo, created = TipoCombustivel.objects.get_or_create(
                nome=nome,
                defaults={
                    'descricao': descricao,
                    'preco_medio': Decimal(str(preco)),
                    'ativo': True
                }
            )
            
            if created:
                self.stdout.write(f"  ‚úÖ Criado: {nome}")
                criados += 1
            else:
                self.stdout.write(f"  ‚ö†Ô∏è  J√° existe: {nome}")
        
        self.stdout.write(f"üìä {criados} tipos de combust√≠vel criados\n")
    
    def _configurar_estoques(self, estoque_inicial, estoque_minimo):
        """Configura estoques no almoxarifado"""
        self.stdout.write("üì¶ Configurando estoques...")
        
        tipos_ativos = TipoCombustivel.objects.filter(ativo=True)
        
        if not tipos_ativos.exists():
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è Nenhum tipo de combust√≠vel encontrado. Use --criar-tipos")
            )
            return
        
        estoques_criados = 0
        produtos_criados = 0
        
        for tipo in tipos_ativos:
            # Criar ou atualizar estoque
            estoque, created = EstoqueCombustivel.objects.get_or_create(
                tipo_combustivel=tipo,
                defaults={
                    'quantidade_em_estoque': estoque_inicial,
                    'estoque_minimo': estoque_minimo,
                    'valor_compra': tipo.preco_medio,
                    'ativo': True
                }
            )
            
            if created:
                self.stdout.write(f"  ‚úÖ Estoque criado: {tipo.nome} - {estoque_inicial}L")
                estoques_criados += 1
            else:
                self.stdout.write(f"  üì¶ J√° existe: {tipo.nome} - {estoque.quantidade_em_estoque}L")
            
            # Criar produto correspondente no almoxarifado geral
            produto, prod_created = Produto.objects.get_or_create(
                codigo=f"COMB_{tipo.id}",
                defaults={
                    'descricao': f"Combust√≠vel - {tipo.nome}",
                    'unidade_medida': "L",
                    'estoque_atual': estoque_inicial
                }
            )
            
            if prod_created:
                self.stdout.write(f"    üì¶ Produto criado: {produto.codigo}")
                produtos_criados += 1
            else:
                # Sincronizar estoque do produto com estoque de combust√≠vel
                produto.estoque_atual = estoque.quantidade_em_estoque
                produto.save()
                self.stdout.write(f"    üîÑ Produto sincronizado: {produto.codigo}")
        
        # Resumo
        self.stdout.write(f"\nüìä RESUMO:")
        self.stdout.write(f"  üì¶ Estoques criados: {estoques_criados}")
        self.stdout.write(f"  üè∑Ô∏è  Produtos criados: {produtos_criados}")
        self.stdout.write(f"  ‚õΩ Total de combust√≠veis: {tipos_ativos.count()}")
        
        # Mostrar status dos estoques
        self.stdout.write(f"\nüìã STATUS DOS ESTOQUES:")
        for estoque in EstoqueCombustivel.objects.filter(ativo=True).select_related('tipo_combustivel'):
            status = "üö® BAIXO" if estoque.abaixo_do_minimo else "‚úÖ OK"
            self.stdout.write(
                f"  {status} {estoque.tipo_combustivel.nome}: "
                f"{estoque.quantidade_em_estoque}L (m√≠n: {estoque.estoque_minimo}L)"
            )