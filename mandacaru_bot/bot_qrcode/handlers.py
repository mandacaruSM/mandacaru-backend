# ===============================================
# ARQUIVO: mandacaru_bot/bot_qr/handlers.py
# Handlers para QR Codes
# ===============================================

import logging
import re
import uuid as uuid_lib
from typing import Dict, Any, Optional
from aiogram import Dispatcher, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command

from core.session import (
    obter_operador_sessao, verificar_autenticacao,
    definir_equipamento_atual, definir_dados_temporarios
)
from core.db import buscar_equipamento_por_uuid, listar_equipamentos
from core.templates import MessageTemplates

logger = logging.getLogger(__name__)

# ===============================================
# PROCESSAMENTO DE QR CODES
# ===============================================

async def processar_qr_code_start(message: Message, comando_completo: str):
    """Processa comando /start com QR code"""
    chat_id = str(message.chat.id)
    
    try:
        # Extrair par√¢metro do comando
        partes = comando_completo.split(' ', 1)
        if len(partes) < 2:
            return False
        
        parametro = partes[1].strip()
        logger.info(f"üì± Processando par√¢metro QR: {parametro}")
        
        # Verificar se √© QR de equipamento: eq_uuid
        if parametro.startswith('eq_'):
            uuid_str = parametro.replace('eq_', '')
            await processar_qr_equipamento(message, uuid_str)
            return True
        
        # Verificar se √© UUID direto (36 caracteres)
        if len(parametro) == 36 and '-' in parametro:
            try:
                uuid_obj = uuid_lib.UUID(parametro)
                await processar_qr_equipamento(message, str(uuid_obj))
                return True
            except ValueError:
                pass
        
        # Outros tipos de QR podem ser adicionados aqui
        logger.warning(f"‚ö†Ô∏è Tipo de QR n√£o reconhecido: {parametro}")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao processar QR code: {e}")
        await message.answer(MessageTemplates.error_generic())
        return False

async def processar_qr_equipamento(message: Message, uuid_str: str):
    """Processa QR code de equipamento"""
    chat_id = str(message.chat.id)
    
    try:
        logger.info(f"üîç Buscando equipamento por UUID: {uuid_str}")
        
        # Verificar se usu√°rio est√° autenticado
        if not verificar_autenticacao(chat_id):
            await message.answer(
                "üîê **Equipamento Detectado!**\n\n"
                f"UUID: `{uuid_str[:8]}...`\n\n"
                "Para acessar este equipamento, voc√™ precisa fazer login primeiro.\n\n"
                "Digite seu nome completo para continuar:"
            )
            # Salvar UUID para depois da autentica√ß√£o
            definir_dados_temporarios(chat_id, 'equipamento_uuid_pendente', uuid_str)
            return
        
        # Buscar equipamento
        equipamento = await buscar_equipamento_por_uuid(uuid_str)
        
        if not equipamento:
            await message.answer(
                "‚ùå **Equipamento N√£o Encontrado**\n\n"
                f"UUID: `{uuid_str[:8]}...`\n\n"
                "Este QR Code pode estar:\n"
                "‚Ä¢ Desatualizado\n"
                "‚Ä¢ De outro sistema\n"
                "‚Ä¢ Corrompido\n\n"
                "üí° Contate o respons√°vel para verificar.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† Menu Principal", callback_data="menu_refresh")]
                ])
            )
            return
        
        # Verificar se operador tem acesso a este equipamento
        operador = obter_operador_sessao(chat_id)
        if not operador:
            logger.error("‚ùå Operador n√£o encontrado na sess√£o")
            await message.answer(MessageTemplates.error_generic())
            return

        equipamentos_permitidos = await listar_equipamentos(operador_id=operador["id"])
        if not any(eq["id"] == equipamento["id"] for eq in equipamentos_permitidos):
            logger.warning(
                f"üö´ Operador {operador['id']} sem permiss√£o para equipamento {equipamento['id']}"
            )
            await message.answer(
                "‚ùå Acesso negado. Voc√™ n√£o tem permiss√£o para este equipamento.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üè† Menu Principal", callback_data="menu_refresh")]]
                ),
            )
            return

        
        # Salvar equipamento na sess√£o
        definir_equipamento_atual(chat_id, equipamento)
        
        # Mostrar informa√ß√µes do equipamento
        await mostrar_menu_equipamento_qr(message, equipamento)
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao processar equipamento: {e}")
        await message.answer(MessageTemplates.error_generic())

async def mostrar_menu_equipamento_qr(message: Message, equipamento: Dict[str, Any]):
    """Mostra menu espec√≠fico para equipamento acessado via QR"""
    
    try:
        nome = equipamento.get('nome', 'Equipamento')
        marca = equipamento.get('marca', 'N/A')
        modelo = equipamento.get('modelo', 'N/A')
        status = equipamento.get('status_operacional', 'N/A')
        horimetro = equipamento.get('horimetro_atual', 0)
        
        # Emoji baseado no status
        status_emoji = "üü¢" if status == "Operacional" else "üü°" if status == "Manuten√ß√£o" else "üî¥"
        
        texto = f"üì± **QR Code Escaneado!**\n\n"
        texto += f"üöú **{nome}**\n"
        texto += f"üè≠ **Marca:** {marca}\n"
        texto += f"üì¶ **Modelo:** {modelo}\n"
        texto += f"{status_emoji} **Status:** {status}\n"
        texto += f"‚è±Ô∏è **Hor√≠metro:** {horimetro:,.1f}h\n\n"
        texto += "Selecione a a√ß√£o desejada:"
        
        # Criar keyboard com a√ß√µes espec√≠ficas
        keyboard = []
        
        # A√ß√£o principal: Checklist
        keyboard.append([
            InlineKeyboardButton(
                text="üìã Novo Checklist", 
                callback_data=f"qr_create_checklist_{equipamento['id']}"
            )
        ])
        
        # Verificar se h√° checklist pendente
        keyboard.append([
            InlineKeyboardButton(
                text="üìä Ver Checklists", 
                callback_data=f"qr_list_checklists_{equipamento['id']}"
            )
        ])
        
        # A√ß√µes secund√°rias
        keyboard.append([
            InlineKeyboardButton(text="‚õΩ Abastecimento", callback_data=f"qr_fuel_{equipamento['id']}"),
            InlineKeyboardButton(text="üîß Manuten√ß√£o", callback_data=f"qr_maintenance_{equipamento['id']}")
        ])
        
        # Informa√ß√µes
        keyboard.append([
            InlineKeyboardButton(text="üìÑ Detalhes", callback_data=f"qr_details_{equipamento['id']}"),
            InlineKeyboardButton(text="üìà Relat√≥rio", callback_data=f"qr_report_{equipamento['id']}")
        ])
        
        # Navega√ß√£o
        keyboard.append([
            InlineKeyboardButton(text="üè† Menu Principal", callback_data="menu_refresh")
        ])
        
        await message.answer(
            texto,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao mostrar menu do equipamento: {e}")
        await message.answer(MessageTemplates.error_generic())

# ===============================================
# HANDLERS DE CALLBACK PARA QR
# ===============================================

def require_auth(handler):
    """Decorator que exige autentica√ß√£o (reutilizado)"""
    async def wrapper(obj, *args, **kwargs):
        # Determinar chat_id baseado no tipo de objeto
        if hasattr(obj, 'chat'):
            chat_id = str(obj.chat.id)
        elif hasattr(obj, 'message') and hasattr(obj.message, 'chat'):
            chat_id = str(obj.message.chat.id)
        else:
            logger.error("‚ùå N√£o foi poss√≠vel determinar chat_id")
            return
        
        # Verificar autentica√ß√£o
        if not verificar_autenticacao(chat_id):
            await obj.answer(MessageTemplates.unauthorized_access())
            return
        
        # Adicionar operador aos argumentos
        operador = obter_operador_sessao(chat_id)
        kwargs['operador'] = operador
        
        return await handler(obj, *args, **kwargs)
    
    return wrapper

@require_auth
async def qr_create_checklist_handler(callback: CallbackQuery, operador=None):
    """Handler para criar checklist via QR"""
    
    try:
        await callback.answer("‚è≥ Criando checklist...")
        
        # Extrair ID do equipamento
        equipamento_id = int(callback.data.split('_')[-1])
        
        # Redirecionar para handler de cria√ß√£o normal
        from bot_checklist.handlers import criar_checklist_equipamento
        
        resultado = await criar_checklist_equipamento(
            equipamento_id,
            operador['codigo']
        )
        
        if resultado and resultado.get('success'):
            checklist = resultado.get('checklist', {})
            checklist_id = checklist.get('id')
            
            texto = "‚úÖ **Checklist Criado via QR!**\n\n"
            texto += f"**ID:** {checklist_id}\n"
            texto += f"**Turno:** {checklist.get('turno', 'MANHA')}\n"
            texto += f"**Itens:** {checklist.get('total_itens', '?')}\n\n"
            texto += "Deseja iniciar a verifica√ß√£o agora?"
            
            keyboard = [
                [InlineKeyboardButton(text="‚ñ∂Ô∏è Iniciar Agora", callback_data=f"start_checklist_{checklist_id}")],
                [InlineKeyboardButton(text="üìã Listar Todos", callback_data="list_checklists")],
                [InlineKeyboardButton(text="üîÑ Escanear Outro QR", callback_data="scan_new_qr")]
            ]
            
            await callback.message.edit_text(
                texto,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        else:
            erro = resultado.get('error', 'Erro desconhecido') if resultado else 'Falha na comunica√ß√£o'
            
            await callback.message.edit_text(
                f"‚ùå **Erro ao Criar Checklist**\n\n{erro}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ Tentar Novamente", callback_data=f"qr_create_checklist_{equipamento_id}")],
                    [InlineKeyboardButton(text="üîÑ Escanear Outro QR", callback_data="scan_new_qr")]
                ])
            )
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar checklist via QR: {e}")
        await callback.message.edit_text(MessageTemplates.error_generic())

@require_auth  
async def qr_details_handler(callback: CallbackQuery, operador=None):
    """Mostra detalhes completos do equipamento"""
    
    try:
        await callback.answer()
        
        # Extrair ID do equipamento
        equipamento_id = int(callback.data.split('_')[-1])
        
        # Buscar equipamento
        from core.db import buscar_equipamento_por_id
        equipamento = await buscar_equipamento_por_id(equipamento_id)
        
        if not equipamento:
            await callback.message.edit_text("‚ùå Equipamento n√£o encontrado")
            return
        
        # Montar informa√ß√µes detalhadas
        nome = equipamento.get('nome', 'N/A')
        marca = equipamento.get('marca', 'N/A')
        modelo = equipamento.get('modelo', 'N/A')
        n_serie = equipamento.get('n_serie', 'N/A')
        ano_fabricacao = equipamento.get('ano_fabricacao', 'N/A')
        horimetro = equipamento.get('horimetro_atual', 0)
        status = equipamento.get('status_operacional', 'N/A')
        
        texto = f"üìã **Detalhes do Equipamento**\n\n"
        texto += f"üöú **Nome:** {nome}\n"
        texto += f"üè≠ **Marca:** {marca}\n"
        texto += f"üì¶ **Modelo:** {modelo}\n"
        texto += f"üî¢ **N¬∫ S√©rie:** {n_serie}\n"
        texto += f"üìÖ **Ano:** {ano_fabricacao}\n"
        texto += f"‚è±Ô∏è **Hor√≠metro:** {horimetro:,.1f}h\n"
        texto += f"üìä **Status:** {status}\n"
        
        # Adicionar informa√ß√µes do cliente se dispon√≠vel
        if equipamento.get('cliente_nome'):
            texto += f"üè¢ **Cliente:** {equipamento['cliente_nome']}\n"
        
        keyboard = [
            [
                InlineKeyboardButton(text="üìã Criar Checklist", callback_data=f"qr_create_checklist_{equipamento_id}"),
                InlineKeyboardButton(text="üìä Ver Hist√≥rico", callback_data=f"qr_list_checklists_{equipamento_id}")
            ],
            [InlineKeyboardButton(text="üîô Voltar", callback_data=f"qr_menu_{equipamento_id}")]
        ]
        
        await callback.message.edit_text(
            texto,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao mostrar detalhes: {e}")
        await callback.message.edit_text(MessageTemplates.error_generic())

async def scan_new_qr_handler(callback: CallbackQuery):
    """Instrui como escanear novo QR"""
    
    await callback.answer()
    
    texto = "üì± **Como Escanear QR Code**\n\n"
    texto += "Para escanear um novo QR Code:\n\n"
    texto += "1Ô∏è‚É£ **Abra a c√¢mera** do seu celular\n"
    texto += "2Ô∏è‚É£ **Aponte para o QR Code** do equipamento\n"
    texto += "3Ô∏è‚É£ **Toque no link** que aparecer\n"
    texto += "4Ô∏è‚É£ **Clique em 'Iniciar'** quando o Telegram abrir\n\n"
    texto += "üîç O QR Code geralmente est√° na plaqueta do equipamento.\n\n"
    texto += "üí° **Dica:** Certifique-se de que h√° luz suficiente para a c√¢mera ler o c√≥digo."
    
    keyboard = [
        [InlineKeyboardButton(text="üìã Meus Checklists", callback_data="list_checklists")],
        [InlineKeyboardButton(text="üè† Menu Principal", callback_data="menu_refresh")]
    ]
    
    await callback.message.edit_text(
        texto,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

# ===============================================
# REGISTRAR HANDLERS
# ===============================================

def register_handlers(dp: Dispatcher):
    """Registra handlers de QR code no dispatcher"""
    
    # Callbacks espec√≠ficos de QR
    dp.callback_query.register(qr_create_checklist_handler, F.data.startswith("qr_create_checklist_"))
    dp.callback_query.register(qr_details_handler, F.data.startswith("qr_details_"))
    dp.callback_query.register(scan_new_qr_handler, F.data == "scan_new_qr")
    
    # Callback para instru√ß√µes de scan
    dp.callback_query.register(scan_new_qr_handler, F.data == "scan_qr")
    
    logger.info("‚úÖ Handlers de QR Code registrados")